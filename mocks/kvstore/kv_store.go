// Code generated by mockery v2.40.2. DO NOT EDIT.

package mockkvstore

import (
	kvstore "github.com/hyperledger/firefly-fabconnect/internal/kvstore"
	mock "github.com/stretchr/testify/mock"
)

// KVStore is an autogenerated mock type for the KVStore type
type KVStore struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *KVStore) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: key
func (_m *KVStore) Delete(key string) error {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: key
func (_m *KVStore) Get(key string) ([]byte, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields:
func (_m *KVStore) Init() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIterator provides a mock function with given fields:
func (_m *KVStore) NewIterator() kvstore.KVIterator {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewIterator")
	}

	var r0 kvstore.KVIterator
	if rf, ok := ret.Get(0).(func() kvstore.KVIterator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kvstore.KVIterator)
		}
	}

	return r0
}

// NewIteratorWithRange provides a mock function with given fields: keyRange
func (_m *KVStore) NewIteratorWithRange(keyRange interface{}) kvstore.KVIterator {
	ret := _m.Called(keyRange)

	if len(ret) == 0 {
		panic("no return value specified for NewIteratorWithRange")
	}

	var r0 kvstore.KVIterator
	if rf, ok := ret.Get(0).(func(interface{}) kvstore.KVIterator); ok {
		r0 = rf(keyRange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kvstore.KVIterator)
		}
	}

	return r0
}

// Put provides a mock function with given fields: key, val
func (_m *KVStore) Put(key string, val []byte) error {
	ret := _m.Called(key, val)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(key, val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewKVStore creates a new instance of KVStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKVStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *KVStore {
	mock := &KVStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
